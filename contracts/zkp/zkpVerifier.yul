object "plonk_verifier" {
    code {
        function allocate(size) -> ptr {
            ptr := mload(0x40)
            if eq(ptr, 0) { ptr := 0x60 }
            mstore(0x40, add(ptr, size))
        }
        let size := datasize("Runtime")
        let offset := allocate(size)
        datacopy(offset, dataoffset("Runtime"), size)
        return(offset, size)
    }
    object "Runtime" {
        code {
            let success:bool := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid:bool {
                {
                    let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine:bool := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }
            mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x0, 13067298129955257197729176189000789254342223383646057823542548699632204487895)

{
    let x := calldataload(0x20)
    mstore(0x40, x)
    let y := calldataload(0x40)
    mstore(0x60, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x60)
    mstore(0x80, x)
    let y := calldataload(0x80)
    mstore(0xa0, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0xa0)
    mstore(0xc0, x)
    let y := calldataload(0xc0)
    mstore(0xe0, y)
    success := and(validate_ec_point(x, y), success)
}
mstore(0x100, keccak256(0x0, 256))
{
    let hash := mload(0x100)
    mstore(0x120, mod(hash, f_q))
    mstore(0x140, hash)
}
mstore8(352, 1)
mstore(0x160, keccak256(0x140, 33))
{
    let hash := mload(0x160)
    mstore(0x180, mod(hash, f_q))
    mstore(0x1a0, hash)
}
mstore8(448, 1)
mstore(0x1c0, keccak256(0x1a0, 33))
{
    let hash := mload(0x1c0)
    mstore(0x1e0, mod(hash, f_q))
    mstore(0x200, hash)
}

{
    let x := calldataload(0xe0)
    mstore(0x220, x)
    let y := calldataload(0x100)
    mstore(0x240, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x120)
    mstore(0x260, x)
    let y := calldataload(0x140)
    mstore(0x280, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x160)
    mstore(0x2a0, x)
    let y := calldataload(0x180)
    mstore(0x2c0, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x1a0)
    mstore(0x2e0, x)
    let y := calldataload(0x1c0)
    mstore(0x300, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x1e0)
    mstore(0x320, x)
    let y := calldataload(0x200)
    mstore(0x340, y)
    success := and(validate_ec_point(x, y), success)
}
mstore(0x360, keccak256(0x200, 352))
{
    let hash := mload(0x360)
    mstore(0x380, mod(hash, f_q))
    mstore(0x3a0, hash)
}

{
    let x := calldataload(0x220)
    mstore(0x3c0, x)
    let y := calldataload(0x240)
    mstore(0x3e0, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x260)
    mstore(0x400, x)
    let y := calldataload(0x280)
    mstore(0x420, y)
    success := and(validate_ec_point(x, y), success)
}
mstore(0x440, keccak256(0x3a0, 160))
{
    let hash := mload(0x440)
    mstore(0x460, mod(hash, f_q))
    mstore(0x480, hash)
}
mstore(0x4a0, mod(calldataload(0x2a0), f_q))
mstore(0x4c0, mod(calldataload(0x2c0), f_q))
mstore(0x4e0, mod(calldataload(0x2e0), f_q))
mstore(0x500, mod(calldataload(0x300), f_q))
mstore(0x520, mod(calldataload(0x320), f_q))
mstore(0x540, mod(calldataload(0x340), f_q))
mstore(0x560, mod(calldataload(0x360), f_q))
mstore(0x580, mod(calldataload(0x380), f_q))
mstore(0x5a0, mod(calldataload(0x3a0), f_q))
mstore(0x5c0, mod(calldataload(0x3c0), f_q))
mstore(0x5e0, mod(calldataload(0x3e0), f_q))
mstore(0x600, mod(calldataload(0x400), f_q))
mstore(0x620, mod(calldataload(0x420), f_q))
mstore(0x640, mod(calldataload(0x440), f_q))
mstore(0x660, mod(calldataload(0x460), f_q))
mstore(0x680, mod(calldataload(0x480), f_q))
mstore(0x6a0, mod(calldataload(0x4a0), f_q))
mstore(0x6c0, mod(calldataload(0x4c0), f_q))
mstore(0x6e0, mod(calldataload(0x4e0), f_q))
mstore(0x700, mod(calldataload(0x500), f_q))
mstore(0x720, keccak256(0x480, 672))
{
    let hash := mload(0x720)
    mstore(0x740, mod(hash, f_q))
    mstore(0x760, hash)
}

{
    let x := calldataload(0x520)
    mstore(0x780, x)
    let y := calldataload(0x540)
    mstore(0x7a0, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x560)
    mstore(0x7c0, x)
    let y := calldataload(0x580)
    mstore(0x7e0, y)
    success := and(validate_ec_point(x, y), success)
}

{
    let x := calldataload(0x5a0)
    mstore(0x800, x)
    let y := calldataload(0x5c0)
    mstore(0x820, y)
    success := and(validate_ec_point(x, y), success)
}
mstore(0x840, keccak256(0x760, 224))
{
    let hash := mload(0x840)
    mstore(0x860, mod(hash, f_q))
    mstore(0x880, hash)
}
mstore(0x8a0, mulmod(mload(0x460), mload(0x460), f_q))
mstore(0x8c0, mulmod(mload(0x8a0), mload(0x8a0), f_q))
mstore(0x8e0, mulmod(mload(0x8c0), mload(0x8c0), f_q))
mstore(0x900, mulmod(mload(0x8e0), mload(0x8e0), f_q))
mstore(0x920, mulmod(mload(0x900), mload(0x900), f_q))
mstore(0x940, mulmod(mload(0x920), mload(0x920), f_q))
mstore(0x960, mulmod(mload(0x940), mload(0x940), f_q))
mstore(0x980, mulmod(mload(0x960), mload(0x960), f_q))
mstore(0x9a0, mulmod(mload(0x980), mload(0x980), f_q))
mstore(0x9c0, mulmod(mload(0x9a0), mload(0x9a0), f_q))
mstore(0x9e0, addmod(mload(0x9c0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xa00, mulmod(mload(0x9e0), 21866867634659744680037180739646672280844703888306253060159436409049855557633, f_q))
mstore(0xa20, mulmod(mload(0xa00), 9936069627611189518829255670237324269287146421271524553312532036927871056678, f_q))
mstore(0xa40, addmod(mload(0x460), 11952173244228085703417150075019950819261217979144509790385672149647937438939, f_q))
mstore(0xa60, mulmod(mload(0xa00), 1680739780407307830605919050682431078078760076686599579086116998224280619988, f_q))
mstore(0xa80, addmod(mload(0x460), 20207503091431967391640486694574844010469604323729434764612087188351527875629, f_q))
mstore(0xaa0, mulmod(mload(0xa00), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0xac0, addmod(mload(0x460), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0xae0, mulmod(mload(0xa00), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))
mstore(0xb00, addmod(mload(0x460), 6189213060905190907425759670690446807930574449253110894497805650994602323199, f_q))
mstore(0xb20, mulmod(mload(0xa00), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))
mstore(0xb40, addmod(mload(0x460), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))
mstore(0xb60, mulmod(mload(0xa00), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))
mstore(0xb80, addmod(mload(0x460), 16962650269846620577512114154870527443683566727810288380890833831998684679710, f_q))
mstore(0xba0, mulmod(mload(0xa00), 1, f_q))
mstore(0xbc0, addmod(mload(0x460), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
{
    let prod := mload(0xa40)

        prod := mulmod(mload(0xa80), prod, f_q)
        mstore(0xbe0, prod)
    
        prod := mulmod(mload(0xac0), prod, f_q)
        mstore(0xc00, prod)
    
        prod := mulmod(mload(0xb00), prod, f_q)
        mstore(0xc20, prod)
    
        prod := mulmod(mload(0xb40), prod, f_q)
        mstore(0xc40, prod)
    
        prod := mulmod(mload(0xb80), prod, f_q)
        mstore(0xc60, prod)
    
        prod := mulmod(mload(0xbc0), prod, f_q)
        mstore(0xc80, prod)
    
        prod := mulmod(mload(0x9e0), prod, f_q)
        mstore(0xca0, prod)
    
}
mstore(0xce0, 32)
mstore(0xd00, 32)
mstore(0xd20, 32)
mstore(0xd40, mload(0xca0))
mstore(0xd60, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xd80, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xce0, 0xc0, 0xcc0, 0x20), 1), success)
{
    
    let inv := mload(0xcc0)
    let v

            v := mload(0x9e0)
            mstore(2528, mulmod(mload(0xc80), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xbc0)
            mstore(3008, mulmod(mload(0xc60), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xb80)
            mstore(2944, mulmod(mload(0xc40), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xb40)
            mstore(2880, mulmod(mload(0xc20), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xb00)
            mstore(2816, mulmod(mload(0xc00), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xac0)
            mstore(2752, mulmod(mload(0xbe0), inv, f_q))
            inv := mulmod(v, inv, f_q)
        
            v := mload(0xa80)
            mstore(2688, mulmod(mload(0xa40), inv, f_q))
            inv := mulmod(v, inv, f_q)
        mstore(0xa40, inv)

}
mstore(0xda0, mulmod(mload(0xa20), mload(0xa40), f_q))
mstore(0xdc0, mulmod(mload(0xa60), mload(0xa80), f_q))
mstore(0xde0, mulmod(mload(0xaa0), mload(0xac0), f_q))
mstore(0xe00, mulmod(mload(0xae0), mload(0xb00), f_q))
mstore(0xe20, mulmod(mload(0xb20), mload(0xb40), f_q))
mstore(0xe40, mulmod(mload(0xb60), mload(0xb80), f_q))
mstore(0xe60, mulmod(mload(0xba0), mload(0xbc0), f_q))
{
    let result := mulmod(mload(0xe60), mload(0x20), f_q)
mstore(3712, result)
}
mstore(0xea0, addmod(mload(0x4a0), mload(0x4c0), f_q))
mstore(0xec0, addmod(mload(0xea0), sub(f_q, mload(0x4e0)), f_q))
mstore(0xee0, mulmod(mload(0xec0), mload(0x500), f_q))
mstore(0xf00, mulmod(mload(0x380), mload(0xee0), f_q))
mstore(0xf20, addmod(1, sub(f_q, mload(0x5c0)), f_q))
mstore(0xf40, mulmod(mload(0xf20), mload(0xe60), f_q))
mstore(0xf60, addmod(mload(0xf00), mload(0xf40), f_q))
mstore(0xf80, mulmod(mload(0x380), mload(0xf60), f_q))
mstore(0xfa0, mulmod(mload(0x6e0), mload(0x6e0), f_q))
mstore(0xfc0, addmod(mload(0xfa0), sub(f_q, mload(0x6e0)), f_q))
mstore(0xfe0, mulmod(mload(0xfc0), mload(0xda0), f_q))
mstore(0x1000, addmod(mload(0xf80), mload(0xfe0), f_q))
mstore(0x1020, mulmod(mload(0x380), mload(0x1000), f_q))
mstore(0x1040, addmod(mload(0x620), sub(f_q, mload(0x600)), f_q))
mstore(0x1060, mulmod(mload(0x1040), mload(0xe60), f_q))
mstore(0x1080, addmod(mload(0x1020), mload(0x1060), f_q))
mstore(0x10a0, mulmod(mload(0x380), mload(0x1080), f_q))
mstore(0x10c0, addmod(mload(0x680), sub(f_q, mload(0x660)), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0xe60), f_q))
mstore(0x1100, addmod(mload(0x10a0), mload(0x10e0), f_q))
mstore(0x1120, mulmod(mload(0x380), mload(0x1100), f_q))
mstore(0x1140, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))
mstore(0x1160, mulmod(mload(0x1140), mload(0xe60), f_q))
mstore(0x1180, addmod(mload(0x1120), mload(0x1160), f_q))
mstore(0x11a0, mulmod(mload(0x380), mload(0x1180), f_q))
mstore(0x11c0, addmod(1, sub(f_q, mload(0xda0)), f_q))
mstore(0x11e0, addmod(mload(0xdc0), mload(0xde0), f_q))
mstore(0x1200, addmod(mload(0x11e0), mload(0xe00), f_q))
mstore(0x1220, addmod(mload(0x1200), mload(0xe20), f_q))
mstore(0x1240, addmod(mload(0x1220), mload(0xe40), f_q))
mstore(0x1260, addmod(mload(0x11c0), sub(f_q, mload(0x1240)), f_q))
mstore(0x1280, mulmod(mload(0x540), mload(0x180), f_q))
mstore(0x12a0, addmod(mload(0x4a0), mload(0x1280), f_q))
mstore(0x12c0, addmod(mload(0x12a0), mload(0x1e0), f_q))
mstore(0x12e0, mulmod(mload(0x12c0), mload(0x5e0), f_q))
mstore(0x1300, mulmod(1, mload(0x180), f_q))
mstore(0x1320, mulmod(mload(0x460), mload(0x1300), f_q))
mstore(0x1340, addmod(mload(0x4a0), mload(0x1320), f_q))
mstore(0x1360, addmod(mload(0x1340), mload(0x1e0), f_q))
mstore(0x1380, mulmod(mload(0x1360), mload(0x5c0), f_q))
mstore(0x13a0, addmod(mload(0x12e0), sub(f_q, mload(0x1380)), f_q))
mstore(0x13c0, mulmod(mload(0x13a0), mload(0x1260), f_q))
mstore(0x13e0, addmod(mload(0x11a0), mload(0x13c0), f_q))
mstore(0x1400, mulmod(mload(0x380), mload(0x13e0), f_q))
mstore(0x1420, mulmod(mload(0x560), mload(0x180), f_q))
mstore(0x1440, addmod(mload(0x4c0), mload(0x1420), f_q))
mstore(0x1460, addmod(mload(0x1440), mload(0x1e0), f_q))
mstore(0x1480, mulmod(mload(0x1460), mload(0x640), f_q))
mstore(0x14a0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x180), f_q))
mstore(0x14c0, mulmod(mload(0x460), mload(0x14a0), f_q))
mstore(0x14e0, addmod(mload(0x4c0), mload(0x14c0), f_q))
mstore(0x1500, addmod(mload(0x14e0), mload(0x1e0), f_q))
mstore(0x1520, mulmod(mload(0x1500), mload(0x620), f_q))
mstore(0x1540, addmod(mload(0x1480), sub(f_q, mload(0x1520)), f_q))
mstore(0x1560, mulmod(mload(0x1540), mload(0x1260), f_q))
mstore(0x1580, addmod(mload(0x1400), mload(0x1560), f_q))
mstore(0x15a0, mulmod(mload(0x380), mload(0x1580), f_q))
mstore(0x15c0, mulmod(mload(0x580), mload(0x180), f_q))
mstore(0x15e0, addmod(mload(0x4e0), mload(0x15c0), f_q))
mstore(0x1600, addmod(mload(0x15e0), mload(0x1e0), f_q))
mstore(0x1620, mulmod(mload(0x1600), mload(0x6a0), f_q))
mstore(0x1640, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x180), f_q))
mstore(0x1660, mulmod(mload(0x460), mload(0x1640), f_q))
mstore(0x1680, addmod(mload(0x4e0), mload(0x1660), f_q))
mstore(0x16a0, addmod(mload(0x1680), mload(0x1e0), f_q))
mstore(0x16c0, mulmod(mload(0x16a0), mload(0x680), f_q))
mstore(0x16e0, addmod(mload(0x1620), sub(f_q, mload(0x16c0)), f_q))
mstore(0x1700, mulmod(mload(0x16e0), mload(0x1260), f_q))
mstore(0x1720, addmod(mload(0x15a0), mload(0x1700), f_q))
mstore(0x1740, mulmod(mload(0x380), mload(0x1720), f_q))
mstore(0x1760, mulmod(mload(0x5a0), mload(0x180), f_q))
mstore(0x1780, addmod(mload(0xe80), mload(0x1760), f_q))
mstore(0x17a0, addmod(mload(0x1780), mload(0x1e0), f_q))
mstore(0x17c0, mulmod(mload(0x17a0), mload(0x700), f_q))
mstore(0x17e0, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x180), f_q))
mstore(0x1800, mulmod(mload(0x460), mload(0x17e0), f_q))
mstore(0x1820, addmod(mload(0xe80), mload(0x1800), f_q))
mstore(0x1840, addmod(mload(0x1820), mload(0x1e0), f_q))
mstore(0x1860, mulmod(mload(0x1840), mload(0x6e0), f_q))
mstore(0x1880, addmod(mload(0x17c0), sub(f_q, mload(0x1860)), f_q))
mstore(0x18a0, mulmod(mload(0x1880), mload(0x1260), f_q))
mstore(0x18c0, addmod(mload(0x1740), mload(0x18a0), f_q))
mstore(0x18e0, mulmod(mload(0x9c0), mload(0x9c0), f_q))
mstore(0x1900, mulmod(1, mload(0x9c0), f_q))
mstore(0x1920, mulmod(mload(0x18c0), mload(0x9e0), f_q))
mstore(0x1940, mulmod(mload(0x860), mload(0x860), f_q))
mstore(0x1960, mulmod(mload(0x1940), mload(0x860), f_q))
mstore(0x1980, mulmod(mload(0x740), mload(0x740), f_q))
mstore(0x19a0, mulmod(mload(0x1980), mload(0x740), f_q))
mstore(0x19c0, mulmod(mload(0x19a0), mload(0x740), f_q))
mstore(0x19e0, mulmod(mload(0x19c0), mload(0x740), f_q))
mstore(0x1a00, mulmod(mload(0x19e0), mload(0x740), f_q))
mstore(0x1a20, mulmod(mload(0x1a00), mload(0x740), f_q))
mstore(0x1a40, mulmod(mload(0x1a20), mload(0x740), f_q))
mstore(0x1a60, mulmod(mload(0x1a40), mload(0x740), f_q))
mstore(0x1a80, mulmod(mload(0x1a60), mload(0x740), f_q))
mstore(0x1aa0, mulmod(mload(0x1a80), mload(0x740), f_q))
mstore(0x1ac0, mulmod(mload(0x1aa0), mload(0x740), f_q))
mstore(0x1ae0, mulmod(mload(0x1ac0), mload(0x740), f_q))
mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x740), f_q))
mstore(0x1b20, mulmod(sub(f_q, mload(0x4a0)), 1, f_q))
mstore(0x1b40, mulmod(sub(f_q, mload(0x4c0)), mload(0x740), f_q))
mstore(0x1b60, mulmod(1, mload(0x740), f_q))
mstore(0x1b80, addmod(mload(0x1b20), mload(0x1b40), f_q))
mstore(0x1ba0, mulmod(sub(f_q, mload(0x4e0)), mload(0x1980), f_q))
mstore(0x1bc0, mulmod(1, mload(0x1980), f_q))
mstore(0x1be0, addmod(mload(0x1b80), mload(0x1ba0), f_q))
mstore(0x1c00, mulmod(sub(f_q, mload(0x5c0)), mload(0x19a0), f_q))
mstore(0x1c20, mulmod(1, mload(0x19a0), f_q))
mstore(0x1c40, addmod(mload(0x1be0), mload(0x1c00), f_q))
mstore(0x1c60, mulmod(sub(f_q, mload(0x620)), mload(0x19c0), f_q))
mstore(0x1c80, mulmod(1, mload(0x19c0), f_q))
mstore(0x1ca0, addmod(mload(0x1c40), mload(0x1c60), f_q))
mstore(0x1cc0, mulmod(sub(f_q, mload(0x680)), mload(0x19e0), f_q))
mstore(0x1ce0, mulmod(1, mload(0x19e0), f_q))
mstore(0x1d00, addmod(mload(0x1ca0), mload(0x1cc0), f_q))
mstore(0x1d20, mulmod(sub(f_q, mload(0x6e0)), mload(0x1a00), f_q))
mstore(0x1d40, mulmod(1, mload(0x1a00), f_q))
mstore(0x1d60, addmod(mload(0x1d00), mload(0x1d20), f_q))
mstore(0x1d80, mulmod(sub(f_q, mload(0x500)), mload(0x1a20), f_q))
mstore(0x1da0, mulmod(1, mload(0x1a20), f_q))
mstore(0x1dc0, addmod(mload(0x1d60), mload(0x1d80), f_q))
mstore(0x1de0, mulmod(sub(f_q, mload(0x540)), mload(0x1a40), f_q))
mstore(0x1e00, mulmod(1, mload(0x1a40), f_q))
mstore(0x1e20, addmod(mload(0x1dc0), mload(0x1de0), f_q))
mstore(0x1e40, mulmod(sub(f_q, mload(0x560)), mload(0x1a60), f_q))
mstore(0x1e60, mulmod(1, mload(0x1a60), f_q))
mstore(0x1e80, addmod(mload(0x1e20), mload(0x1e40), f_q))
mstore(0x1ea0, mulmod(sub(f_q, mload(0x580)), mload(0x1a80), f_q))
mstore(0x1ec0, mulmod(1, mload(0x1a80), f_q))
mstore(0x1ee0, addmod(mload(0x1e80), mload(0x1ea0), f_q))
mstore(0x1f00, mulmod(sub(f_q, mload(0x5a0)), mload(0x1aa0), f_q))
mstore(0x1f20, mulmod(1, mload(0x1aa0), f_q))
mstore(0x1f40, addmod(mload(0x1ee0), mload(0x1f00), f_q))
mstore(0x1f60, mulmod(sub(f_q, mload(0x1920)), mload(0x1ac0), f_q))
mstore(0x1f80, mulmod(1, mload(0x1ac0), f_q))
mstore(0x1fa0, mulmod(mload(0x1900), mload(0x1ac0), f_q))
mstore(0x1fc0, addmod(mload(0x1f40), mload(0x1f60), f_q))
mstore(0x1fe0, mulmod(sub(f_q, mload(0x520)), mload(0x1ae0), f_q))
mstore(0x2000, mulmod(1, mload(0x1ae0), f_q))
mstore(0x2020, addmod(mload(0x1fc0), mload(0x1fe0), f_q))
mstore(0x2040, mulmod(mload(0x2020), 1, f_q))
mstore(0x2060, mulmod(mload(0x1b60), 1, f_q))
mstore(0x2080, mulmod(mload(0x1bc0), 1, f_q))
mstore(0x20a0, mulmod(mload(0x1c20), 1, f_q))
mstore(0x20c0, mulmod(mload(0x1c80), 1, f_q))
mstore(0x20e0, mulmod(mload(0x1ce0), 1, f_q))
mstore(0x2100, mulmod(mload(0x1d40), 1, f_q))
mstore(0x2120, mulmod(mload(0x1da0), 1, f_q))
mstore(0x2140, mulmod(mload(0x1e00), 1, f_q))
mstore(0x2160, mulmod(mload(0x1e60), 1, f_q))
mstore(0x2180, mulmod(mload(0x1ec0), 1, f_q))
mstore(0x21a0, mulmod(mload(0x1f20), 1, f_q))
mstore(0x21c0, mulmod(mload(0x1f80), 1, f_q))
mstore(0x21e0, mulmod(mload(0x1fa0), 1, f_q))
mstore(0x2200, mulmod(mload(0x2000), 1, f_q))
mstore(0x2220, mulmod(sub(f_q, mload(0x5e0)), 1, f_q))
mstore(0x2240, mulmod(sub(f_q, mload(0x640)), mload(0x740), f_q))
mstore(0x2260, addmod(mload(0x2220), mload(0x2240), f_q))
mstore(0x2280, mulmod(sub(f_q, mload(0x6a0)), mload(0x1980), f_q))
mstore(0x22a0, addmod(mload(0x2260), mload(0x2280), f_q))
mstore(0x22c0, mulmod(sub(f_q, mload(0x700)), mload(0x19a0), f_q))
mstore(0x22e0, addmod(mload(0x22a0), mload(0x22c0), f_q))
mstore(0x2300, mulmod(mload(0x22e0), mload(0x860), f_q))
mstore(0x2320, mulmod(1, mload(0x860), f_q))
mstore(0x2340, mulmod(mload(0x1b60), mload(0x860), f_q))
mstore(0x2360, mulmod(mload(0x1bc0), mload(0x860), f_q))
mstore(0x2380, mulmod(mload(0x1c20), mload(0x860), f_q))
mstore(0x23a0, addmod(mload(0x2040), mload(0x2300), f_q))
mstore(0x23c0, addmod(mload(0x20a0), mload(0x2320), f_q))
mstore(0x23e0, addmod(mload(0x20c0), mload(0x2340), f_q))
mstore(0x2400, addmod(mload(0x20e0), mload(0x2360), f_q))
mstore(0x2420, addmod(mload(0x2100), mload(0x2380), f_q))
mstore(0x2440, mulmod(sub(f_q, mload(0x6c0)), 1, f_q))
mstore(0x2460, mulmod(sub(f_q, mload(0x660)), mload(0x740), f_q))
mstore(0x2480, addmod(mload(0x2440), mload(0x2460), f_q))
mstore(0x24a0, mulmod(sub(f_q, mload(0x600)), mload(0x1980), f_q))
mstore(0x24c0, addmod(mload(0x2480), mload(0x24a0), f_q))
mstore(0x24e0, mulmod(mload(0x24c0), mload(0x1940), f_q))
mstore(0x2500, mulmod(1, mload(0x1940), f_q))
mstore(0x2520, mulmod(mload(0x1b60), mload(0x1940), f_q))
mstore(0x2540, mulmod(mload(0x1bc0), mload(0x1940), f_q))
mstore(0x2560, addmod(mload(0x23a0), mload(0x24e0), f_q))
mstore(0x2580, addmod(mload(0x2400), mload(0x2500), f_q))
mstore(0x25a0, addmod(mload(0x23e0), mload(0x2520), f_q))
mstore(0x25c0, addmod(mload(0x23c0), mload(0x2540), f_q))
mstore(0x25e0, mulmod(1, mload(0x460), f_q))
mstore(0x2600, mulmod(1, mload(0x25e0), f_q))
mstore(0x2620, mulmod(19380560087801265747114831706136320509424814679569278834391540198888293317501, mload(0x460), f_q))
mstore(0x2640, mulmod(mload(0x2320), mload(0x2620), f_q))
mstore(0x2660, mulmod(9936069627611189518829255670237324269287146421271524553312532036927871056678, mload(0x460), f_q))
mstore(0x2680, mulmod(mload(0x2500), mload(0x2660), f_q))
mstore(0x26a0, 0x0000000000000000000000000000000000000000000000000000000000000001)
            mstore(0x26c0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x26e0, mload(0x2560))
success := and(eq(staticcall(gas(), 0x7, 0x26a0, 0x60, 0x26a0, 0x40), 1), success)
mstore(0x2700, mload(0x26a0))
            mstore(0x2720, mload(0x26c0))
mstore(0x2740, mload(0x40))
            mstore(0x2760, mload(0x60))
success := and(eq(staticcall(gas(), 0x6, 0x2700, 0x80, 0x2700, 0x40), 1), success)
mstore(0x2780, mload(0x80))
            mstore(0x27a0, mload(0xa0))
mstore(0x27c0, mload(0x2060))
success := and(eq(staticcall(gas(), 0x7, 0x2780, 0x60, 0x2780, 0x40), 1), success)
mstore(0x27e0, mload(0x2700))
            mstore(0x2800, mload(0x2720))
mstore(0x2820, mload(0x2780))
            mstore(0x2840, mload(0x27a0))
success := and(eq(staticcall(gas(), 0x6, 0x27e0, 0x80, 0x27e0, 0x40), 1), success)
mstore(0x2860, mload(0xc0))
            mstore(0x2880, mload(0xe0))
mstore(0x28a0, mload(0x2080))
success := and(eq(staticcall(gas(), 0x7, 0x2860, 0x60, 0x2860, 0x40), 1), success)
mstore(0x28c0, mload(0x27e0))
            mstore(0x28e0, mload(0x2800))
mstore(0x2900, mload(0x2860))
            mstore(0x2920, mload(0x2880))
success := and(eq(staticcall(gas(), 0x6, 0x28c0, 0x80, 0x28c0, 0x40), 1), success)
mstore(0x2940, mload(0x220))
            mstore(0x2960, mload(0x240))
mstore(0x2980, mload(0x25c0))
success := and(eq(staticcall(gas(), 0x7, 0x2940, 0x60, 0x2940, 0x40), 1), success)
mstore(0x29a0, mload(0x28c0))
            mstore(0x29c0, mload(0x28e0))
mstore(0x29e0, mload(0x2940))
            mstore(0x2a00, mload(0x2960))
success := and(eq(staticcall(gas(), 0x6, 0x29a0, 0x80, 0x29a0, 0x40), 1), success)
mstore(0x2a20, mload(0x260))
            mstore(0x2a40, mload(0x280))
mstore(0x2a60, mload(0x25a0))
success := and(eq(staticcall(gas(), 0x7, 0x2a20, 0x60, 0x2a20, 0x40), 1), success)
mstore(0x2a80, mload(0x29a0))
            mstore(0x2aa0, mload(0x29c0))
mstore(0x2ac0, mload(0x2a20))
            mstore(0x2ae0, mload(0x2a40))
success := and(eq(staticcall(gas(), 0x6, 0x2a80, 0x80, 0x2a80, 0x40), 1), success)
mstore(0x2b00, mload(0x2a0))
            mstore(0x2b20, mload(0x2c0))
mstore(0x2b40, mload(0x2580))
success := and(eq(staticcall(gas(), 0x7, 0x2b00, 0x60, 0x2b00, 0x40), 1), success)
mstore(0x2b60, mload(0x2a80))
            mstore(0x2b80, mload(0x2aa0))
mstore(0x2ba0, mload(0x2b00))
            mstore(0x2bc0, mload(0x2b20))
success := and(eq(staticcall(gas(), 0x6, 0x2b60, 0x80, 0x2b60, 0x40), 1), success)
mstore(0x2be0, mload(0x2e0))
            mstore(0x2c00, mload(0x300))
mstore(0x2c20, mload(0x2420))
success := and(eq(staticcall(gas(), 0x7, 0x2be0, 0x60, 0x2be0, 0x40), 1), success)
mstore(0x2c40, mload(0x2b60))
            mstore(0x2c60, mload(0x2b80))
mstore(0x2c80, mload(0x2be0))
            mstore(0x2ca0, mload(0x2c00))
success := and(eq(staticcall(gas(), 0x6, 0x2c40, 0x80, 0x2c40, 0x40), 1), success)
mstore(0x2cc0, 0x020272866375a033b6bad46e76a45d0e9338de77bd7800afcbbb2c01610657dd)
            mstore(0x2ce0, 0x28a9ba2266d50ff8bb109880a317db8958d31da8afe59a15e093cd14a0e2df35)
mstore(0x2d00, mload(0x2120))
success := and(eq(staticcall(gas(), 0x7, 0x2cc0, 0x60, 0x2cc0, 0x40), 1), success)
mstore(0x2d20, mload(0x2c40))
            mstore(0x2d40, mload(0x2c60))
mstore(0x2d60, mload(0x2cc0))
            mstore(0x2d80, mload(0x2ce0))
success := and(eq(staticcall(gas(), 0x6, 0x2d20, 0x80, 0x2d20, 0x40), 1), success)
mstore(0x2da0, 0x1c36c822825799f2b97896e39fa432c05c28200ba8221d0557bc451c832e2f73)
            mstore(0x2dc0, 0x033e63c5bbfbef42fe460c5995590ff3b9d2b360c0e97ab15bfd366d70a319b1)
mstore(0x2de0, mload(0x2140))
success := and(eq(staticcall(gas(), 0x7, 0x2da0, 0x60, 0x2da0, 0x40), 1), success)
mstore(0x2e00, mload(0x2d20))
            mstore(0x2e20, mload(0x2d40))
mstore(0x2e40, mload(0x2da0))
            mstore(0x2e60, mload(0x2dc0))
success := and(eq(staticcall(gas(), 0x6, 0x2e00, 0x80, 0x2e00, 0x40), 1), success)
mstore(0x2e80, 0x0cfc0100bfd4e9471e8d7aa53c8714f9fc9e97a8e5c68beb6d4fb8ad8a8cc97d)
            mstore(0x2ea0, 0x2ed39b980ee094a8e638d5f26add1bdc291f6a623952b4b503ba74c288aac574)
mstore(0x2ec0, mload(0x2160))
success := and(eq(staticcall(gas(), 0x7, 0x2e80, 0x60, 0x2e80, 0x40), 1), success)
mstore(0x2ee0, mload(0x2e00))
            mstore(0x2f00, mload(0x2e20))
mstore(0x2f20, mload(0x2e80))
            mstore(0x2f40, mload(0x2ea0))
success := and(eq(staticcall(gas(), 0x6, 0x2ee0, 0x80, 0x2ee0, 0x40), 1), success)
mstore(0x2f60, 0x028982dc978120e6a3956147c08e2a95e90757f58143706507944fad23ae71e1)
            mstore(0x2f80, 0x27ec0352f6625fbc15f0bd970d623d053ee7acc117e01dea4cbc0ba78d5d5228)
mstore(0x2fa0, mload(0x2180))
success := and(eq(staticcall(gas(), 0x7, 0x2f60, 0x60, 0x2f60, 0x40), 1), success)
mstore(0x2fc0, mload(0x2ee0))
            mstore(0x2fe0, mload(0x2f00))
mstore(0x3000, mload(0x2f60))
            mstore(0x3020, mload(0x2f80))
success := and(eq(staticcall(gas(), 0x6, 0x2fc0, 0x80, 0x2fc0, 0x40), 1), success)
mstore(0x3040, 0x2358e29b7b6b504ac4ae230b2b8860ba0a7bb9967d5a7e477dea73e4f4d4a4dc)
            mstore(0x3060, 0x0d39e56f0ef991cc0c657433f78174c95ba652d93a0a4aa73e3aa9b01cb0c87a)
mstore(0x3080, mload(0x21a0))
success := and(eq(staticcall(gas(), 0x7, 0x3040, 0x60, 0x3040, 0x40), 1), success)
mstore(0x30a0, mload(0x2fc0))
            mstore(0x30c0, mload(0x2fe0))
mstore(0x30e0, mload(0x3040))
            mstore(0x3100, mload(0x3060))
success := and(eq(staticcall(gas(), 0x6, 0x30a0, 0x80, 0x30a0, 0x40), 1), success)
mstore(0x3120, mload(0x3c0))
            mstore(0x3140, mload(0x3e0))
mstore(0x3160, mload(0x21c0))
success := and(eq(staticcall(gas(), 0x7, 0x3120, 0x60, 0x3120, 0x40), 1), success)
mstore(0x3180, mload(0x30a0))
            mstore(0x31a0, mload(0x30c0))
mstore(0x31c0, mload(0x3120))
            mstore(0x31e0, mload(0x3140))
success := and(eq(staticcall(gas(), 0x6, 0x3180, 0x80, 0x3180, 0x40), 1), success)
mstore(0x3200, mload(0x400))
            mstore(0x3220, mload(0x420))
mstore(0x3240, mload(0x21e0))
success := and(eq(staticcall(gas(), 0x7, 0x3200, 0x60, 0x3200, 0x40), 1), success)
mstore(0x3260, mload(0x3180))
            mstore(0x3280, mload(0x31a0))
mstore(0x32a0, mload(0x3200))
            mstore(0x32c0, mload(0x3220))
success := and(eq(staticcall(gas(), 0x6, 0x3260, 0x80, 0x3260, 0x40), 1), success)
mstore(0x32e0, mload(0x320))
            mstore(0x3300, mload(0x340))
mstore(0x3320, mload(0x2200))
success := and(eq(staticcall(gas(), 0x7, 0x32e0, 0x60, 0x32e0, 0x40), 1), success)
mstore(0x3340, mload(0x3260))
            mstore(0x3360, mload(0x3280))
mstore(0x3380, mload(0x32e0))
            mstore(0x33a0, mload(0x3300))
success := and(eq(staticcall(gas(), 0x6, 0x3340, 0x80, 0x3340, 0x40), 1), success)
mstore(0x33c0, mload(0x780))
            mstore(0x33e0, mload(0x7a0))
mstore(0x3400, mload(0x2600))
success := and(eq(staticcall(gas(), 0x7, 0x33c0, 0x60, 0x33c0, 0x40), 1), success)
mstore(0x3420, mload(0x3340))
            mstore(0x3440, mload(0x3360))
mstore(0x3460, mload(0x33c0))
            mstore(0x3480, mload(0x33e0))
success := and(eq(staticcall(gas(), 0x6, 0x3420, 0x80, 0x3420, 0x40), 1), success)
mstore(0x34a0, mload(0x7c0))
            mstore(0x34c0, mload(0x7e0))
mstore(0x34e0, mload(0x2640))
success := and(eq(staticcall(gas(), 0x7, 0x34a0, 0x60, 0x34a0, 0x40), 1), success)
mstore(0x3500, mload(0x3420))
            mstore(0x3520, mload(0x3440))
mstore(0x3540, mload(0x34a0))
            mstore(0x3560, mload(0x34c0))
success := and(eq(staticcall(gas(), 0x6, 0x3500, 0x80, 0x3500, 0x40), 1), success)
mstore(0x3580, mload(0x800))
            mstore(0x35a0, mload(0x820))
mstore(0x35c0, mload(0x2680))
success := and(eq(staticcall(gas(), 0x7, 0x3580, 0x60, 0x3580, 0x40), 1), success)
mstore(0x35e0, mload(0x3500))
            mstore(0x3600, mload(0x3520))
mstore(0x3620, mload(0x3580))
            mstore(0x3640, mload(0x35a0))
success := and(eq(staticcall(gas(), 0x6, 0x35e0, 0x80, 0x35e0, 0x40), 1), success)
mstore(0x3660, mload(0x7c0))
            mstore(0x3680, mload(0x7e0))
mstore(0x36a0, mload(0x2320))
success := and(eq(staticcall(gas(), 0x7, 0x3660, 0x60, 0x3660, 0x40), 1), success)
mstore(0x36c0, mload(0x780))
            mstore(0x36e0, mload(0x7a0))
mstore(0x3700, mload(0x3660))
            mstore(0x3720, mload(0x3680))
success := and(eq(staticcall(gas(), 0x6, 0x36c0, 0x80, 0x36c0, 0x40), 1), success)
mstore(0x3740, mload(0x800))
            mstore(0x3760, mload(0x820))
mstore(0x3780, mload(0x2500))
success := and(eq(staticcall(gas(), 0x7, 0x3740, 0x60, 0x3740, 0x40), 1), success)
mstore(0x37a0, mload(0x36c0))
            mstore(0x37c0, mload(0x36e0))
mstore(0x37e0, mload(0x3740))
            mstore(0x3800, mload(0x3760))
success := and(eq(staticcall(gas(), 0x6, 0x37a0, 0x80, 0x37a0, 0x40), 1), success)
mstore(0x3820, mload(0x35e0))
            mstore(0x3840, mload(0x3600))
mstore(0x3860, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
    mstore(0x3880, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
    mstore(0x38a0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
    mstore(0x38c0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x38e0, mload(0x37a0))
            mstore(0x3900, mload(0x37c0))
mstore(0x3920, 0x028b4fff1a56531f0f2b178b740b7b4388771d65770cf90f02bcdf77efecdb87)
    mstore(0x3940, 0x08656166bc62b4088a9316c888ca3752bb1f1d163994c70471d91c3c1707e2e4)
    mstore(0x3960, 0x004f21f9ae33beb92863faf5432ff1fd4ae7ddcd012878ca4e4c3007fb96adee)
    mstore(0x3980, 0x1c23c4d19497823d38aa50d85fcb15f4742fbc2fcd573a0faf3c534523ae6058)
success := and(eq(staticcall(gas(), 0x8, 0x3820, 0x180, 0x3820, 0x20), 1), success)
success := and(eq(mload(0x3820), 1), success)

    if not(success) { revert(0, 0) }
    return(0, 0)

        }
    }
}